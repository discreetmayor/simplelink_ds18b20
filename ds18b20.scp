<?xml version="1.0" encoding="UTF-8"?>
<project name="DS18B20" version="2.8.0.170">
    <desc><![CDATA[]]></desc>
    <pattr name="Apply default power mode">0</pattr>
    <pattr name="Board">None</pattr>
    <pattr name="Chip name">CC1312R1F3</pattr>
    <pattr name="Chip package">QFN48 7x7 RGZ</pattr>
    <pattr name="Chip revision">E</pattr>
    <pattr name="Clock in active mode">1</pattr>
    <pattr name="Code prefix"></pattr>
    <pattr name="Default power mode">0</pattr>
    <pattr name="Operating system">TI-RTOS</pattr>
    <pattr name="Output directory">.</pattr>
    <pattr name="RTC tick interval (16.16 format)">2000</pattr>
    <pattr name="Run-time logging UART RX pin"></pattr>
    <pattr name="Run-time logging UART TX pin"></pattr>
    <task name="DS18B20">
        <desc><![CDATA[]]></desc>
        <tattr name="COMMAND_CONVERT" type="expr" content="const" scope="task" min="0" max="65535">0x44</tattr>
        <tattr name="COMMAND_READ" type="expr" content="const" scope="task" min="0" max="65535">0xBE</tattr>
        <tattr name="COMMAND_SKIP_ROM" type="expr" content="const" scope="task" min="0" max="65535">0xCC</tattr>
        <tattr name="SCRATCH_PAD_TOTAL_BYTES" type="expr" content="const" scope="task" min="0" max="65535">9</tattr>
        <tattr name="output.scratchpad" size="SCRATCH_PAD_TOTAL_BYTES" type="expr" content="struct_array" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.temperature" type="expr" content="struct" scope="task" min="-32768" max="32767">0</tattr>
        <tattr name="state.byte" size="SCRATCH_PAD_TOTAL_BYTES" type="expr" content="struct_array" scope="task" min="0" max="65535">0</tattr>
        <tattr name="state.ended" type="expr" content="struct" scope="task" min="0" max="65535">0</tattr>
        <resource_ref name="ADC" enabled="0"/>
        <resource_ref name="AON Domain Functionality" enabled="0"/>
        <resource_ref name="Accumulator-Based Math" enabled="0"/>
        <resource_ref name="Analog Open-Drain Pins" enabled="0"/>
        <resource_ref name="Analog Open-Source Pins" enabled="0"/>
        <resource_ref name="Analog Pins" enabled="0"/>
        <resource_ref name="COMPA" enabled="0"/>
        <resource_ref name="COMPA Event Trigger" enabled="0"/>
        <resource_ref name="COMPB" enabled="0"/>
        <resource_ref name="COMPB Event Trigger" enabled="0"/>
        <resource_ref name="Delay Insertion" enabled="1"/>
        <resource_ref name="Differential Output Pins" enabled="0"/>
        <resource_ref name="Digital Input Pins" enabled="0"/>
        <resource_ref name="Digital Open-Drain Pins" enabled="0"/>
        <resource_ref name="Digital Open-Source Pins" enabled="0"/>
        <resource_ref name="Digital Output Pins" enabled="1">
            <io_usage name="DS18B20" label="1 Wire Temp Sensor">
                <uattr name="Configuration on uninitialization">1</uattr>
                <uattr name="Output drive strength">1</uattr>
                <uattr name="Output value on initialization">1</uattr>
                <uattr name="Pin count">0</uattr>
                <uattr name="Pin/0000">DIO14</uattr>
                <uattr name="Pin/0001"></uattr>
                <uattr name="Pin/0002"></uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
                <uattr name="Pin/0008"></uattr>
                <uattr name="Pin/0009"></uattr>
                <uattr name="Pin/0010"></uattr>
                <uattr name="Pin/0011"></uattr>
                <uattr name="Pin/0012"></uattr>
                <uattr name="Pin/0013"></uattr>
                <uattr name="Pin/0014"></uattr>
                <uattr name="Pin/0015"></uattr>
                <uattr name="Pin/0016"></uattr>
                <uattr name="Pin/0017"></uattr>
                <uattr name="Pin/0018"></uattr>
                <uattr name="Pin/0019"></uattr>
                <uattr name="Pin/0020"></uattr>
                <uattr name="Pin/0021"></uattr>
                <uattr name="Pin/0022"></uattr>
                <uattr name="Pin/0023"></uattr>
                <uattr name="Pin/0024"></uattr>
                <uattr name="Pin/0025"></uattr>
                <uattr name="Pin/0026"></uattr>
                <uattr name="Pin/0027"></uattr>
                <uattr name="Pin/0028"></uattr>
                <uattr name="Pin/0029"></uattr>
                <uattr name="Pin/0030"></uattr>
                <uattr name="Pin/0031"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Dynamic Power Control" enabled="0"/>
        <resource_ref name="GPIO Event Trigger" enabled="0"/>
        <resource_ref name="I2C Master" enabled="0">
            <rattr name="SCL frequency">0</rattr>
            <rattr name="SCL stretch timeout">1</rattr>
            <io_usage>
                <uattr name="Output drive strength">1</uattr>
                <uattr name="SCL pin/0000"></uattr>
                <uattr name="SDA pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="ISRC" enabled="0"/>
        <resource_ref name="LCD Controller" enabled="0">
            <rattr name="Waveform state count">8</rattr>
            <io_usage>
                <uattr name="Output drive strength">0</uattr>
                <uattr name="Pin count">20</uattr>
                <uattr name="Pin/0000"></uattr>
                <uattr name="Pin/0001"></uattr>
                <uattr name="Pin/0002"></uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
                <uattr name="Pin/0008"></uattr>
                <uattr name="Pin/0009"></uattr>
                <uattr name="Pin/0010"></uattr>
                <uattr name="Pin/0011"></uattr>
                <uattr name="Pin/0012"></uattr>
                <uattr name="Pin/0013"></uattr>
                <uattr name="Pin/0014"></uattr>
                <uattr name="Pin/0015"></uattr>
                <uattr name="Pin/0016"></uattr>
                <uattr name="Pin/0017"></uattr>
                <uattr name="Pin/0018"></uattr>
                <uattr name="Pin/0019"></uattr>
                <uattr name="Pin/0020"></uattr>
                <uattr name="Pin/0021"></uattr>
                <uattr name="Pin/0022"></uattr>
                <uattr name="Pin/0023"></uattr>
                <uattr name="Pin/0024"></uattr>
                <uattr name="Pin/0025"></uattr>
                <uattr name="Pin/0026"></uattr>
                <uattr name="Pin/0027"></uattr>
                <uattr name="Pin/0028"></uattr>
                <uattr name="Pin/0029"></uattr>
                <uattr name="Pin/0030"></uattr>
                <uattr name="Pin/0031"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Math and Logic" enabled="0"/>
        <resource_ref name="Multi-Buffered Output Data Exchange" enabled="0">
            <rattr name="Buffer count">2</rattr>
            <rattr name="Indicate overflow at buffer check">1</rattr>
            <rattr name="Indicate overflow at buffer switch">0</rattr>
            <rattr name="Prevent overflow at buffer switch">1</rattr>
        </resource_ref>
        <resource_ref name="Peripheral Sharing" enabled="0"/>
        <resource_ref name="Pulse Counter" enabled="0"/>
        <resource_ref name="RTC Multi-Event Capture" enabled="0"/>
        <resource_ref name="RTC-Based Execution Scheduling" enabled="1"/>
        <resource_ref name="Reference DAC" enabled="0"/>
        <resource_ref name="Run-Time Logging" enabled="0"/>
        <resource_ref name="SPI Chip Select" enabled="0"/>
        <resource_ref name="SPI Data Transfer" enabled="0">
            <rattr name="Bit rate">0</rattr>
            <rattr name="MISO configuration when inactive">-1</rattr>
            <rattr name="MOSI configuration on initialization">0</rattr>
            <rattr name="MOSI configuration on uninitialization">0</rattr>
            <rattr name="SCLK configuration on initialization">0</rattr>
            <rattr name="SCLK configuration on uninitialization">0</rattr>
            <io_usage>
                <uattr name="MISO pin/0000"></uattr>
                <uattr name="MOSI pin/0000"></uattr>
                <uattr name="SCLK pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Signal Observation" enabled="0"/>
        <resource_ref name="System CPU Alert" enabled="0"/>
        <resource_ref name="System Event Trigger" enabled="0"/>
        <resource_ref name="TDC" enabled="0"/>
        <resource_ref name="Timer 0" enabled="0"/>
        <resource_ref name="Timer 0 Event Trigger" enabled="0"/>
        <resource_ref name="Timer 1" enabled="0"/>
        <resource_ref name="Timer 1 Event Trigger" enabled="0"/>
        <resource_ref name="Timer 2" enabled="0"/>
        <resource_ref name="Timer 2 Event Trigger" enabled="0"/>
        <resource_ref name="UART Emulator" enabled="0">
            <rattr name="RX buffer size">64</rattr>
            <rattr name="Required idle period before enabling RX">11</rattr>
            <rattr name="TX buffer size">64</rattr>
            <io_usage>
                <uattr name="RX pin/0000"></uattr>
                <uattr name="TX pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <sccode name="event0" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event1" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event2" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event3" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="execute" init_power_mode="0"><![CDATA[macro masterPulse(result) {
    result = 1;
    gpioCfgMode(AUXIO_O_DS18B20, GPIO_MODE_OUTPUT);
    gpioClearOutput(AUXIO_O_DS18B20);
    fwDelayUs(600);
    gpioSetOutput(AUXIO_O_DS18B20);
    gpioCfgMode(AUXIO_O_DS18B20, GPIO_MODE_INPUT);
    fwDelayUs(60);
    gpioGetInputValue(AUXIO_O_DS18B20; result);
    fwDelayUs(80);
}

macro outputByte(command) {
    U16 byte = command;
    U16 n = 8;
    while(n > 0) {
        gpioCfgMode(AUXIO_O_DS18B20, GPIO_MODE_OUTPUT);
        gpioClearOutput(AUXIO_O_DS18B20);
        if(byte & 0x1) {
            fwDelayUs(1);
            gpioCfgMode(AUXIO_O_DS18B20, GPIO_MODE_INPUT);
            fwDelayUs(40);
        } else {
            fwDelayUs(40);
            gpioCfgMode(AUXIO_O_DS18B20, GPIO_MODE_INPUT);
        }
        byte = byte >> 1;
        n = n - 1;
    }
}

macro getCRC(byte, crc) {
    U16 carry_check = 0;
    U16 temp_data = byte;
    U16 counter = 0;
    U16 data_byte = 0;
    while(counter < BITS_IN_A_BYTE) {
        data_byte ^= crc;
        crc = (crc / 2);
        temp_data = temp_data / 2;
        carry_check = data_byte & 0x01;
        if (carry_check) {
              crc = crc ^ 0x8C;
        }
        data_byte = temp_data;
    }
}

// sensorcontroller can't divide non-constants?!
// can't calculate crc here then
macro readScratchpad() {
    // todo: have to read 56 bits to calculate crc
    U16 bits;
    U16 n = 0;
    U16 b;
    U16 byte;
    U16 crc;
    while(n <= SCRATCH_PAD_TOTAL_BYTES) {
        byte = 0;
        b = 0;
        bits = 8;
        while(bits > 0) {
            //pulse low
            gpioCfgMode(AUXIO_O_DS18B20, GPIO_MODE_OUTPUT);
            gpioClearOutput(AUXIO_O_DS18B20);

            //set to input and read
            gpioCfgMode(AUXIO_O_DS18B20, GPIO_MODE_INPUT);
            gpioGetInputValue(AUXIO_O_DS18B20; b);

            fwDelayUs(10);

            bits-=1;
            byte = byte | (b<<(7-bits));
        }
        output.scratchpad[n] = byte;
        //getCRC(byte, crc);
        n += 1;
    }
}

macro delayMs(ms) {
    U16 n = ms;
    while(n > 0) {
        fwDelayUs(1000);
        n -= 1;
    }
}

gpioEnableInputBuf(AUXIO_O_DS18B20);

while(state.ended == 0) {
    U16 presence = 1;
    U16 result = 0;
    masterPulse(presence);
    if(presence == 0) {
        presence = 1;
        outputByte(COMMAND_SKIP_ROM);
        outputByte(COMMAND_CONVERT);
        gpioCfgMode(AUXIO_O_DS18B20,GPIO_MODE_OUTPUT);
        gpioSetOutput(AUXIO_O_DS18B20);
        delayMs(750);
        masterPulse(presence);
        if(presence == 0) {
            outputByte(COMMAND_SKIP_ROM);
            outputByte(COMMAND_READ);
            fwDelayUs(1);
            readScratchpad();
            //readByte(output.temperature);
            //if crc is good, output.temperature = tmp;
        }
    }
    delayMs(5000);
}
fwScheduleTask(1);]]></sccode>
        <sccode name="initialize" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="terminate" init_power_mode="0"><![CDATA[]]></sccode>
        <event_trigger active_count="1">0,1,2,3</event_trigger>
        <tt_iter>run_execute</tt_iter>
        <tt_struct>output.temperature</tt_struct>
        <rtl_struct></rtl_struct>
        <rtl_task_sel en="1" struct_log_list="output"/>
    </task>
</project>
